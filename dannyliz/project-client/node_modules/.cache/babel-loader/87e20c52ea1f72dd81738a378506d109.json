{"ast":null,"code":"var _jsxFileName = \"/root/code/projects/skinteractions/dannyliz/project-client/src/components/NewProductForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from 'react'; // Function for posting new data to db.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewProductForm(_ref) {\n  _s();\n\n  let {\n    checkboxArray\n  } = _ref;\n  // const populate = () => {\n  // checkboxArray.forEach((option) => {\n  // })}\n  let data = [];\n\n  function getData() {\n    checkboxArray.forEach(chemical => {\n      data.push({\n        p_id: chemical.id\n      });\n    });\n  } // } ) [\n  //     {\n  //       p_id: 1,\n  //       p_name: \"isco\",\n  //       isChecked: true\n  //     },\n  //     {\n  //       p_id: 2,\n  //       p_name: \"david\",\n  //       isChecked: false\n  //     }\n  //   ];\n\n\n  const [dataForm, setDataForm] = useState(data);\n\n  const changeCheck = id => {\n    console.log(id);\n    let temp = [...dataForm];\n    const index = temp.findIndex(x => x.p_id === id);\n    if (index === -1) return;\n    temp[index].isChecked = !temp[index].isChecked;\n    setDataForm(temp);\n  };\n\n  const handleSubmit = () => {\n    console.log(`{\"data\":` + JSON.stringify(dataForm) + `}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [checkboxArray.map((li, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: li.isChecked,\n          onChange: () => {\n            changeCheck(li.p_id);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: li,\n          children: li\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 7\n  }, this);\n} // // Empty use state object in format used in db.\n//   const [form, setForm] = useState({\n//     id: \"\",\n//     name: \"\",\n//     description: \"\",\n//     number: \"\"\n//   })\n// // Listens for change, duplicates object and populates with entered data.\n//   const handleChange = (event) => {\n//     setForm({\n//       ...form,\n//       [event.target.name]:event.target.value\n//     })\n//   }\n// // On click, actually posts data to db and then resets form fields.\n//   function handleSubmit(event) {\n//     event.preventDefault()\n//     fetch(`http://localhost:3000/contacts`,{\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(form),\n//     }).then(\n//     setForm({\n//       id: \"\",\n//       name: \"\",\n//       description: \"\",\n//       number: \"\"\n//     }))\n//   }\n// // Displays new contact form and calls necessary functions, links back to home.\n//   return (\n//     <div className=\"box\" style={{marginLeft: \"646px\", marginRight:\"790px\", width:\"18%\",  marginTop: \"-40px\", alignItems:'center'}}>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <input onChange={handleChange} value={form.name} \n//               type=\"text\" name=\"name\" placeholder=\"Name\" />\n//           <input onChange={handleChange} value={form.description} \n//               type=\"text\" name=\"description\" placeholder=\"Description\" />\n//           <input onChange={handleChange} value={form.number} \n//               type=\"tel\" maxlength=\"10\" name=\"number\" placeholder=\"Number\" />\n//         </div>\n//         <button type=\"submit\">\n//           Add Contact\n//         </button>\n//       </form>\n//       <nav>\n//         <button>\n//           <Link to='/'>Home</Link>\n//         </button>\n//       </nav>\n//     </div>\n//   );\n// }\n\n\n_s(NewProductForm, \"pZDSas4jdoVQCIXGvZhsMqMgmYc=\");\n\n_c = NewProductForm;\nexport default NewProductForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewProductForm\");","map":{"version":3,"names":["React","useState","NewProductForm","checkboxArray","data","getData","forEach","chemical","push","p_id","id","dataForm","setDataForm","changeCheck","console","log","temp","index","findIndex","x","isChecked","handleSubmit","JSON","stringify","map","li"],"sources":["/root/code/projects/skinteractions/dannyliz/project-client/src/components/NewProductForm.js"],"sourcesContent":["import React from \"react\";\nimport {useState} from 'react'\n\n\n// Function for posting new data to db.\nfunction NewProductForm({checkboxArray}) {\n\n\n\n// const populate = () => {\n// checkboxArray.forEach((option) => {\n\n// })}\nlet data = []\n\n\n  function getData() { \n    checkboxArray.forEach((chemical) => {\n        data.push({\n            p_id: chemical.id\n            \n        })\n\n    })}\n    // } ) [\n    //     {\n    //       p_id: 1,\n    //       p_name: \"isco\",\n    //       isChecked: true\n    //     },\n    //     {\n    //       p_id: 2,\n    //       p_name: \"david\",\n    //       isChecked: false\n    //     }\n    //   ];\n\n    const [dataForm, setDataForm] = useState(data);\n\n    const changeCheck = (id) => {\n      console.log(id);\n      let temp = [...dataForm];\n      const index = temp.findIndex((x) => x.p_id === id);\n      if (index === -1) return;\n      temp[index].isChecked = !temp[index].isChecked;\n      setDataForm(temp);\n    };\n  \n    const handleSubmit = () => {\n      console.log(`{\"data\":` + JSON.stringify(dataForm) + `}`);\n    };\n    return (\n      <div className=\"App\">\n        <form>\n          {checkboxArray.map((li, index) => (\n            <div key={index}>\n              <input\n                type=\"checkbox\"\n                checked={li.isChecked}\n                onChange={() => {\n                  changeCheck(li.p_id);\n                }}\n              />\n              <label htmlFor={li}>{li}</label>\n            </div>\n          ))}\n          <button type=\"button\" onClick={handleSubmit}>\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // Empty use state object in format used in db.\n//   const [form, setForm] = useState({\n//     id: \"\",\n//     name: \"\",\n//     description: \"\",\n//     number: \"\"\n//   })\n\n// // Listens for change, duplicates object and populates with entered data.\n//   const handleChange = (event) => {\n//     setForm({\n//       ...form,\n//       [event.target.name]:event.target.value\n//     })\n//   }\n\n// // On click, actually posts data to db and then resets form fields.\n//   function handleSubmit(event) {\n//     event.preventDefault()\n//     fetch(`http://localhost:3000/contacts`,{\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(form),\n//     }).then(\n//     setForm({\n//       id: \"\",\n//       name: \"\",\n//       description: \"\",\n//       number: \"\"\n//     }))\n//   }\n\n// // Displays new contact form and calls necessary functions, links back to home.\n//   return (\n//     <div className=\"box\" style={{marginLeft: \"646px\", marginRight:\"790px\", width:\"18%\",  marginTop: \"-40px\", alignItems:'center'}}>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <input onChange={handleChange} value={form.name} \n//               type=\"text\" name=\"name\" placeholder=\"Name\" />\n//           <input onChange={handleChange} value={form.description} \n//               type=\"text\" name=\"description\" placeholder=\"Description\" />\n//           <input onChange={handleChange} value={form.number} \n//               type=\"tel\" maxlength=\"10\" name=\"number\" placeholder=\"Number\" />\n//         </div>\n//         <button type=\"submit\">\n//           Add Contact\n//         </button>\n//       </form>\n//       <nav>\n//         <button>\n//           <Link to='/'>Home</Link>\n//         </button>\n//       </nav>\n//     </div>\n//   );\n// }\n\nexport default NewProductForm;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,OAAvB,C,CAGA;;;;AACA,SAASC,cAAT,OAAyC;EAAA;;EAAA,IAAjB;IAACC;EAAD,CAAiB;EAIzC;EACA;EAEA;EACA,IAAIC,IAAI,GAAG,EAAX;;EAGE,SAASC,OAAT,GAAmB;IACjBF,aAAa,CAACG,OAAd,CAAuBC,QAAD,IAAc;MAChCH,IAAI,CAACI,IAAL,CAAU;QACNC,IAAI,EAAEF,QAAQ,CAACG;MADT,CAAV;IAKH,CAND;EAMG,CAlBkC,CAmBrC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACG,IAAD,CAAxC;;EAEA,MAAMS,WAAW,GAAIH,EAAD,IAAQ;IAC1BI,OAAO,CAACC,GAAR,CAAYL,EAAZ;IACA,IAAIM,IAAI,GAAG,CAAC,GAAGL,QAAJ,CAAX;IACA,MAAMM,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAgBC,CAAD,IAAOA,CAAC,CAACV,IAAF,KAAWC,EAAjC,CAAd;IACA,IAAIO,KAAK,KAAK,CAAC,CAAf,EAAkB;IAClBD,IAAI,CAACC,KAAD,CAAJ,CAAYG,SAAZ,GAAwB,CAACJ,IAAI,CAACC,KAAD,CAAJ,CAAYG,SAArC;IACAR,WAAW,CAACI,IAAD,CAAX;EACD,CAPD;;EASA,MAAMK,YAAY,GAAG,MAAM;IACzBP,OAAO,CAACC,GAAR,CAAa,UAAD,GAAaO,IAAI,CAACC,SAAL,CAAeZ,QAAf,CAAb,GAAyC,GAArD;EACD,CAFD;;EAGA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAA,WACGR,aAAa,CAACqB,GAAd,CAAkB,CAACC,EAAD,EAAKR,KAAL,kBACjB;QAAA,wBACE;UACE,IAAI,EAAC,UADP;UAEE,OAAO,EAAEQ,EAAE,CAACL,SAFd;UAGE,QAAQ,EAAE,MAAM;YACdP,WAAW,CAACY,EAAE,CAAChB,IAAJ,CAAX;UACD;QALH;UAAA;UAAA;UAAA;QAAA,QADF,eAQE;UAAO,OAAO,EAAEgB,EAAhB;UAAA,UAAqBA;QAArB;UAAA;UAAA;UAAA;QAAA,QARF;MAAA,GAAUR,KAAV;QAAA;QAAA;QAAA;MAAA,QADD,CADH,eAaE;QAAQ,IAAI,EAAC,QAAb;QAAsB,OAAO,EAAEI,YAA/B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAbF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,C,CA0BH;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAtJSnB,c;;KAAAA,c;AAwJT,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
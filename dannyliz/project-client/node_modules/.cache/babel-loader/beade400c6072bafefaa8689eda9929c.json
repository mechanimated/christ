{"ast":null,"code":"var _jsxFileName = \"/root/code/projects/skinteractions/dannyliz/project-client/src/components/NewProductForm.js\";\nimport React from \"react\";\nimport { useState } from 'react'; // Function for posting new data to db.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewProductForm(_ref) {\n  let {\n    checkboxArray\n  } = _ref;\n  let data = [];\n\n  function getData() {\n    checkboxArray.forEach((chemical, index) => {\n      data.push({\n        p_id: index,\n        p_name: chemical,\n        isChecked: false\n      });\n    });\n  }\n\n  getData(); //  console.log(data)\n  // const [dataForm, setDataForm] = useState(data);\n  // const [newChems, setNewChems] = useState(data);\n\n  let newChems = []; // const changeCheck = (x) => {\n  //     console.log(x)\n  //     // if(x.isChecked === true)\n  //     newChems.push(x);\n  // };\n\n  const handleSubmit = () => {\n    if (data.isChecked === true) {\n      fetch(`http://localhost:9292/saved_products`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).then(console.log(\"posted\"));\n    } else {\n      console.log();\n    } ///POST NEW ENTRY\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [checkboxArray.map((li, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: li,\n          id: index,\n          checked: li.isChecked,\n          onChange: e => {\n            data[index].isChecked = !data[index].isChecked;\n            console.log(data[index].isChecked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: li,\n          children: li\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n} // // Empty use state object in format used in db.\n//   const [form, setForm] = useState({\n//     id: \"\",\n//     name: \"\",\n//     description: \"\",\n//     number: \"\"\n//   })\n// // Listens for change, duplicates object and populates with entered data.\n//   const handleChange = (event) => {\n//     setForm({\n//       ...form,\n//       [event.target.name]:event.target.value\n//     })\n//   }\n// // On click, actually posts data to db and then resets form fields.\n//   function handleSubmit(event) {\n//     event.preventDefault()\n//     fetch(`http://localhost:3000/contacts`,{\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(form),\n//     }).then(\n//     setForm({\n//       id: \"\",\n//       name: \"\",\n//       description: \"\",\n//       number: \"\"\n//     }))\n//   }\n// // Displays new contact form and calls necessary functions, links back to home.\n//   return (\n//     <div className=\"box\" style={{marginLeft: \"646px\", marginRight:\"790px\", width:\"18%\",  marginTop: \"-40px\", alignItems:'center'}}>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <input onChange={handleChange} value={form.name} \n//               type=\"text\" name=\"name\" placeholder=\"Name\" />\n//           <input onChange={handleChange} value={form.description} \n//               type=\"text\" name=\"description\" placeholder=\"Description\" />\n//           <input onChange={handleChange} value={form.number} \n//               type=\"tel\" maxlength=\"10\" name=\"number\" placeholder=\"Number\" />\n//         </div>\n//         <button type=\"submit\">\n//           Add Contact\n//         </button>\n//       </form>\n//       <nav>\n//         <button>\n//           <Link to='/'>Home</Link>\n//         </button>\n//       </nav>\n//     </div>\n//   );\n// }\n\n\n_c = NewProductForm;\nexport default NewProductForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewProductForm\");","map":{"version":3,"names":["React","useState","NewProductForm","checkboxArray","data","getData","forEach","chemical","index","push","p_id","p_name","isChecked","newChems","handleSubmit","fetch","method","headers","body","JSON","stringify","then","console","log","map","li","e"],"sources":["/root/code/projects/skinteractions/dannyliz/project-client/src/components/NewProductForm.js"],"sourcesContent":["import React from \"react\";\nimport {useState} from 'react'\n\n\n// Function for posting new data to db.\nfunction NewProductForm({checkboxArray}) {\n\n\n\nlet data = []\n\n\n  function getData() { \n    checkboxArray.forEach((chemical, index) => {\n        data.push({\n            p_id: index,\n            p_name: chemical,\n            isChecked: false\n        })\n\n    })}\n    getData()\n\n//  console.log(data)\n\n\n    // const [dataForm, setDataForm] = useState(data);\n\n    // const [newChems, setNewChems] = useState(data);\n  \n    let newChems = []\n    // const changeCheck = (x) => {\n    //     console.log(x)\n    //     // if(x.isChecked === true)\n    //     newChems.push(x);\n    // };\n  \n    const handleSubmit = () => {\n\n            if(data.isChecked === true) {\n                fetch(`http://localhost:9292/saved_products`,{\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify(data),\n                }).then(\n                console.log(\"posted\"))\n                } else { console.log()}\n                ///POST NEW ENTRY\n            }\n\n    \n\n \n    \n    return (\n      <div className=\"App\">\n        <form>\n          {checkboxArray.map((li, index) => (\n            <div key={index}>\n              <input\n                type=\"checkbox\"\n                value={li}\n                id={index}\n                checked={li.isChecked}\n                onChange={(e) => {\n                    data[index].isChecked = !data[index].isChecked\n                    console.log(data[index].isChecked)\n                    }\n                }\n              />\n              <label htmlFor={li}>{li}</label>\n            </div>\n          ))}\n          <button type=\"button\" onClick={handleSubmit}>\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // Empty use state object in format used in db.\n//   const [form, setForm] = useState({\n//     id: \"\",\n//     name: \"\",\n//     description: \"\",\n//     number: \"\"\n//   })\n\n// // Listens for change, duplicates object and populates with entered data.\n//   const handleChange = (event) => {\n//     setForm({\n//       ...form,\n//       [event.target.name]:event.target.value\n//     })\n//   }\n\n// // On click, actually posts data to db and then resets form fields.\n//   function handleSubmit(event) {\n//     event.preventDefault()\n//     fetch(`http://localhost:3000/contacts`,{\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(form),\n//     }).then(\n//     setForm({\n//       id: \"\",\n//       name: \"\",\n//       description: \"\",\n//       number: \"\"\n//     }))\n//   }\n\n// // Displays new contact form and calls necessary functions, links back to home.\n//   return (\n//     <div className=\"box\" style={{marginLeft: \"646px\", marginRight:\"790px\", width:\"18%\",  marginTop: \"-40px\", alignItems:'center'}}>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <input onChange={handleChange} value={form.name} \n//               type=\"text\" name=\"name\" placeholder=\"Name\" />\n//           <input onChange={handleChange} value={form.description} \n//               type=\"text\" name=\"description\" placeholder=\"Description\" />\n//           <input onChange={handleChange} value={form.number} \n//               type=\"tel\" maxlength=\"10\" name=\"number\" placeholder=\"Number\" />\n//         </div>\n//         <button type=\"submit\">\n//           Add Contact\n//         </button>\n//       </form>\n//       <nav>\n//         <button>\n//           <Link to='/'>Home</Link>\n//         </button>\n//       </nav>\n//     </div>\n//   );\n// }\n\nexport default NewProductForm;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,OAAvB,C,CAGA;;;;AACA,SAASC,cAAT,OAAyC;EAAA,IAAjB;IAACC;EAAD,CAAiB;EAIzC,IAAIC,IAAI,GAAG,EAAX;;EAGE,SAASC,OAAT,GAAmB;IACjBF,aAAa,CAACG,OAAd,CAAsB,CAACC,QAAD,EAAWC,KAAX,KAAqB;MACvCJ,IAAI,CAACK,IAAL,CAAU;QACNC,IAAI,EAAEF,KADA;QAENG,MAAM,EAAEJ,QAFF;QAGNK,SAAS,EAAE;MAHL,CAAV;IAMH,CAPD;EAOG;;EACHP,OAAO,GAhB8B,CAkBzC;EAGI;EAEA;;EAEA,IAAIQ,QAAQ,GAAG,EAAf,CAzBqC,CA0BrC;EACA;EACA;EACA;EACA;;EAEA,MAAMC,YAAY,GAAG,MAAM;IAEnB,IAAGV,IAAI,CAACQ,SAAL,KAAmB,IAAtB,EAA4B;MACxBG,KAAK,CAAE,sCAAF,EAAwC;QAC3CC,MAAM,EAAE,MADmC;QAE3CC,OAAO,EAAE;UACP,gBAAgB;QADT,CAFkC;QAK3CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAehB,IAAf;MALqC,CAAxC,CAAL,CAMGiB,IANH,CAOAC,OAAO,CAACC,GAAR,CAAY,QAAZ,CAPA;IAQC,CATL,MASW;MAAED,OAAO,CAACC,GAAR;IAAc,CAXR,CAYf;;EACH,CAbT;;EAmBA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAA,WACGpB,aAAa,CAACqB,GAAd,CAAkB,CAACC,EAAD,EAAKjB,KAAL,kBACjB;QAAA,wBACE;UACE,IAAI,EAAC,UADP;UAEE,KAAK,EAAEiB,EAFT;UAGE,EAAE,EAAEjB,KAHN;UAIE,OAAO,EAAEiB,EAAE,CAACb,SAJd;UAKE,QAAQ,EAAGc,CAAD,IAAO;YACbtB,IAAI,CAACI,KAAD,CAAJ,CAAYI,SAAZ,GAAwB,CAACR,IAAI,CAACI,KAAD,CAAJ,CAAYI,SAArC;YACAU,OAAO,CAACC,GAAR,CAAYnB,IAAI,CAACI,KAAD,CAAJ,CAAYI,SAAxB;UACC;QARP;UAAA;UAAA;UAAA;QAAA,QADF,eAYE;UAAO,OAAO,EAAEa,EAAhB;UAAA,UAAqBA;QAArB;UAAA;UAAA;UAAA;QAAA,QAZF;MAAA,GAAUjB,KAAV;QAAA;QAAA;QAAA;MAAA,QADD,CADH,eAiBE;QAAQ,IAAI,EAAC,QAAb;QAAsB,OAAO,EAAEM,YAA/B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,C,CA0BH;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA/JSZ,c;AAiKT,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
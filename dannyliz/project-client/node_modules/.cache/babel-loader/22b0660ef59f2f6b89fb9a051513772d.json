{"ast":null,"code":"var _jsxFileName = \"/root/code/projects/skinteractions/dannyliz/project-client/src/components/RoutinePage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport RoutineList from './RoutineList';\nimport RoutineSearch from './RoutineSearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RoutinePage() {\n  _s();\n\n  const [search, setSearch] = useState('');\n  const [savedProducts, setSavedProducts] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [render, reRender] = useState(true);\n  useEffect(() => {\n    fetch(`http://localhost:9292/ingredients`).then(res => res.json()).then(data => {\n      setIngredients(data);\n    });\n  }, [render]);\n  useEffect(() => {\n    fetch(`http://localhost:9292/saved_products`).then(res => res.json()).then(data => {\n      setSavedProducts(data);\n    });\n  }, [render]);\n\n  function handleSavedDelete(id) {\n    const newSavedProducts = savedProducts.filter(product => product.id !== id);\n    setSavedProducts(newSavedProducts);\n  }\n\n  let list = savedProducts.filter(product => product.name.toLowerCase().includes(search.toLowerCase())); //   temp1.map((e) => {\n  //     return e.split(', ')\n  // }).flat()\n\n  let chemArray = [];\n  let chemTypeArray = [];\n  let chemTypeCheck = [];\n\n  function getChem() {\n    list.forEach(product => {\n      chemArray.push(product.chemicals);\n      chemArray = chemArray.map(e => {\n        return e.split(', ');\n      }).flat();\n    });\n    return chemArray;\n  }\n\n  getChem();\n\n  function getChemType() {\n    ingredients.forEach(product => {\n      chemTypeArray.push(product.name);\n      chemTypeArray = chemTypeArray.map(e => {\n        return e.split(', ');\n      }).flat();\n      chemTypeArray.forEach(chemType => {\n        if (chemArray.includes(product.name)) {\n          if (chemTypeCheck.indexOf(product.chem_type) === -1) {\n            chemTypeCheck.push(product.chem_type);\n          }\n        } else {}\n      });\n    });\n    return chemTypeArray;\n  }\n\n  getChemType();\n  console.log(chemTypeCheck);\n\n  function alertMe() {\n    if (chemTypeCheck.includes(\"vitamin B3\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n      console.log('bad ret');\n    } else {}\n\n    if (chemTypeCheck.includes(\"vitamin C\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n      console.log('bad C no work');\n    } else {}\n\n    if (chemTypeCheck.includes(\"phenol\") && chemTypeCheck.includes(\"peroxide\")) {\n      console.log('bad bleach');\n    } else {}\n\n    if (chemTypeCheck.includes(\"beta-hydroxy acid\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n      console.log('bad dry');\n    } else {}\n\n    if (chemTypeCheck.includes(\"peroxide\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n      console.log('bad dry');\n    } else {}\n\n    if (chemTypeCheck.includes(\"vitamin C\") && chemTypeCheck.includes(\"peroxide\")) {\n      console.log('bad C no work');\n    } else {}\n\n    if (chemTypeCheck.includes(\"vitamin B3\") && chemTypeCheck.includes(\"beta-hydroxy acid\")) {\n      console.log('bad ret 2 electric boogaloo');\n    } else {}\n\n    if (chemTypeCheck.includes(\"silicone\")) {\n      console.log('careful order');\n    } else {}\n\n    if (!chemTypeCheck.includes(\"salicylate\") && !chemTypeCheck.includes(\"dibenzoylmethane\")) {\n      console.log('careful order');\n    } else {}\n  }\n\n  alertMe(); // pull list chemicals\n  //split\n  //compare to name\n  //use name to find chem_type\n  // switch case compare\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(RoutineSearch, {\n      search: setSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoutineList, {\n      reRender: reRender,\n      handleSavedDelete: handleSavedDelete,\n      savedProducts: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RoutinePage, \"IFfEq6psU79f8Pcg81YMRmwN8FQ=\");\n\n_c = RoutinePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoutinePage\");","map":{"version":3,"names":["React","useState","useEffect","RoutineList","RoutineSearch","RoutinePage","search","setSearch","savedProducts","setSavedProducts","ingredients","setIngredients","render","reRender","fetch","then","res","json","data","handleSavedDelete","id","newSavedProducts","filter","product","list","name","toLowerCase","includes","chemArray","chemTypeArray","chemTypeCheck","getChem","forEach","push","chemicals","map","e","split","flat","getChemType","chemType","indexOf","chem_type","console","log","alertMe"],"sources":["/root/code/projects/skinteractions/dannyliz/project-client/src/components/RoutinePage.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport RoutineList from './RoutineList'\nimport RoutineSearch from './RoutineSearch'\n\n\nexport default function RoutinePage() {\n\n  const [search, setSearch] = useState('')\n  const [savedProducts, setSavedProducts] = useState([])\n  const [ingredients, setIngredients] = useState([])\n  const [render, reRender] = useState(true)\n\n  useEffect(() => {\n    fetch(`http://localhost:9292/ingredients`)\n        .then(res => res.json())\n        .then(data => {\n            setIngredients(data)\n        })\n}, [render])\n\n  useEffect(() => {\n      fetch(`http://localhost:9292/saved_products`)\n          .then(res => res.json())\n          .then(data => {\n              setSavedProducts(data)\n          })\n  }, [render])\n\n  function handleSavedDelete(id) {\n    const newSavedProducts = savedProducts.filter((product) => product.id !== id)\n    setSavedProducts(newSavedProducts)\n}\n\n  let list = savedProducts.filter((product) => product.name.toLowerCase().includes(search.toLowerCase()))\n\n\n   \n//   temp1.map((e) => {\n//     return e.split(', ')\n// }).flat()\nlet chemArray = []\nlet chemTypeArray = []\nlet chemTypeCheck = []\n\n  function getChem(){\n\n      list.forEach((product) => {\n        chemArray.push(product.chemicals)\n        chemArray = chemArray.map((e) => {\n          return e.split(', ')\n        }).flat()   \n      })\n      return chemArray\n    }\n  \n  getChem()\n\n\n  function getChemType() {\n\n    ingredients.forEach((product) => {\n      chemTypeArray.push(product.name)\n      chemTypeArray = chemTypeArray.map((e) => {\n        return e.split(', ')\n      }).flat()   \n      \n    chemTypeArray.forEach((chemType) => {\n\n      if(chemArray.includes(product.name)) {\n\n        if(chemTypeCheck.indexOf(product.chem_type) === -1) {\n          chemTypeCheck.push(product.chem_type);\n        }\n\n      } else { }\n    })\n    })\n    return chemTypeArray\n  }\n\n  getChemType()\n\nconsole.log(chemTypeCheck)\n\nfunction alertMe() {\n if(chemTypeCheck.includes(\"vitamin B3\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n  console.log('bad ret')\n } else {}\n if(chemTypeCheck.includes(\"vitamin C\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n  console.log('bad C no work')\n } else {}\n if(chemTypeCheck.includes(\"phenol\") && chemTypeCheck.includes(\"peroxide\")) {\n  console.log('bad bleach')\n } else {}\n\n if(chemTypeCheck.includes(\"beta-hydroxy acid\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n  console.log('bad dry')\n } else {}\n\n if(chemTypeCheck.includes(\"peroxide\") && chemTypeCheck.includes(\"alpha-hydroxy acid\")) {\n  console.log('bad dry')\n } else {}\n\n if(chemTypeCheck.includes(\"vitamin C\") && chemTypeCheck.includes(\"peroxide\")) {\n  console.log('bad C no work')\n } else {}\n\n if(chemTypeCheck.includes(\"vitamin B3\") && chemTypeCheck.includes(\"beta-hydroxy acid\")) {\n  console.log('bad ret 2 electric boogaloo')\n } else {}\n\n if(chemTypeCheck.includes(\"silicone\")) {\n  console.log('careful order')\n } else {}\n if(!chemTypeCheck.includes(\"salicylate\") && !chemTypeCheck.includes(\"dibenzoylmethane\")) {\n  console.log('careful order')\n } else {}\n\n}\nalertMe() \n// pull list chemicals\n  //split\n  //compare to name\n  //use name to find chem_type\n  // switch case compare\n\n  return (\n    <div>\n      <RoutineSearch search={setSearch}/>  \n\n      <RoutineList reRender={reRender} handleSavedDelete={handleSavedDelete} savedProducts={list} />\n      \n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}